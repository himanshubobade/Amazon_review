#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'findMaxLength' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. VECTOR_INTEGER skills
 *  2. INTEGER k
 */

int findMaxLength(vector<int> skills, int k) {
    int n = skills.size();
    vector<vector<int>> dp(n, vector<int>(k + 1, 0));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j <= k; ++j) {
            dp[i][j] = 1;
            for (int l = i - 1; l >= 0; --l) {
                int diffCount = count(skills.begin() + l, skills.begin() + i, skills[i]) + 1;
                if (skills[i] != skills[l]) {
                    dp[i][j] = max(dp[i][j], dp[l][j - 1] + diffCount);
                } else {
                    dp[i][j] = max(dp[i][j], dp[l][j] + diffCount);
                }
            }
        }
    }

    int maxLength = 0;
    for (int j = 0; j <= k; ++j) {
        maxLength = max(maxLength, dp[n - 1][j]);
    }
    return maxLength;
}


int main() {
    ofstream fout(getenv("OUTPUT_PATH"));

    string skills_count_temp;
    getline(cin, skills_count_temp);

    int skills_count = stoi(ltrim(rtrim(skills_count_temp)));

    vector<int> skills(skills_count);

    for (int i = 0; i < skills_count; i++) {
        string skills_item_temp;
        getline(cin, skills_item_temp);

        int skills_item = stoi(ltrim(rtrim(skills_item_temp)));

        skills[i] = skills_item;
    }

    string k_temp;
    getline(cin, k_temp);

    int k = stoi(ltrim(rtrim(k_temp)));

    int result = findMaxLength(skills, k);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}